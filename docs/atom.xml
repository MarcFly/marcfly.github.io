<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/atom.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-07T15:22:26+02:00</updated><id>/atom.xml</id><title type="html">Marc Torres’ Devlog</title><author><name>Marc Torres Jimenez</name></author><entry><title type="html">Math for GameDev - Part 1: Vectors &amp;amp; Dot product</title><link href="/math/games/2021/08/06/MathForGameDev-1.html" rel="alternate" type="text/html" title="Math for GameDev - Part 1: Vectors &amp;amp; Dot product" /><published>2021-08-06T00:00:00+02:00</published><updated>2021-08-06T14:00:00+02:00</updated><id>/math/games/2021/08/06/MathForGameDev-1</id><content type="html" xml:base="/math/games/2021/08/06/MathForGameDev-1.html">&lt;p&gt;&lt;a href=&quot;https://twitter.com/FreyaHolmer&quot;&gt;Freya Holmer&lt;/a&gt; published some time ago some classes on the basic maths required for gamedev. Having myself not been a great math student in university I think it is important for myself to have notes in an accessible form. Hope it is useful to someone.&lt;/p&gt;

&lt;h1 id=&quot;vectors-basics---1d&quot;&gt;Vectors Basics - 1D&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/02-MathGameDev01/Vector1D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vectors by themselves just represent a point relative to an other origin point. In the base example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;/code&gt; has the origin in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; but ends in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2&lt;/code&gt;, the vector itself is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2(-3)&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt; on the other hand starts at our arbitrary origin thus the component &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; being the representative of the vector itself &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1(2)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/02-MathGameDev01/length_sign_1D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; : &lt;strong&gt;absolute&lt;/strong&gt; magnitude or scalar size of a vector. Calculating the magnitude of a vector varies by dimentions, explained later.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;absolute&lt;/code&gt; : refering to the positive part of numbers, also known as unsigned.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;direction&lt;/code&gt; : unit representation of a vector&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unit / normalized vector&lt;/code&gt; : vector which its length is 1. Basically &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v / length(v) = (vx / length(v), vy / length(v), ...)&lt;/code&gt;h(v), …)`&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sign(v)&lt;/code&gt; : general representation of the direction of a vector. It should return a vector according to the vector dimention input, normalized (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length = 1&lt;/code&gt;).
    &lt;ul&gt;
      &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0 direction&lt;/code&gt; vector, can be interpreted in a variety of way. Generally we want 1 to be returned in programming but your mileage may vary.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/02-MathGameDev01/distance_1D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt; : length of the vector that joins two positions : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abs(length(vB - vA))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signed distance&lt;/code&gt; : usually we use the positive term of a distance, sometimes we want also a negative want, thuse we don’t get the absolute : `length(vB - vA)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using more dimentions you will want to use different colors per dimention. Usually, we use &lt;strong&gt;&lt;span style=&quot;background:white&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;R&lt;/span&gt;&lt;span style=&quot;color:green&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; color space to map to &lt;strong&gt;&lt;span style=&quot;background:white&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;X&lt;/span&gt;&lt;span style=&quot;color:green&quot;&gt;Y&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; axis.&lt;/p&gt;

&lt;p&gt;Adding new dimentions in an orthographic space, each new axis will be perpendicular ot the previous ones.&lt;/p&gt;

&lt;p&gt;Vectors really define a point in space from a defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0o&lt;/code&gt; (Origin point).&lt;/p&gt;

&lt;h1 id=&quot;2d-vectors---vector2dx-y&quot;&gt;2D Vectors - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector2D(x, y)&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/02-MathGameDev01/Vector2D.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Addition:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 + v2 = (v1x + v2x, v1y + v2y)&lt;/code&gt; - &lt;strong&gt;Commutative&lt;/strong&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 + v2 = v2 + v1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Substraction:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 - v2 = (v1x - v2x, v1y - v2y)&lt;/code&gt; - &lt;strong&gt;NON Commutative&lt;/strong&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 - v2 != v2 - v1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why not commutative? -&amp;gt; We are changing the sign of v2 (negate components), then perform an addition of the vectors.&lt;/li&gt;
  &lt;li&gt;Ex: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2,1) - (1,1) = (1, 0)&lt;/code&gt; but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1,1) - (2,1) = (-1,0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/02-MathGameDev01/Vector2D_Scalar.png&quot; alt=&quot;Scalar Multiplication&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scalar Multiplication:&lt;/strong&gt; There are more types, but in the most basic is per component multiplication to scale it. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 * scalar = (v1.x * scalar, v1.y * scalar)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 * v2 = (v1.x * v2.x, v1.y * v2.y)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vector interpretation depends on its purpose, by themselves vectors don’t define anything but a point. Be clear about what a vector is supposed to be interpreted as (direction, translation, point, worldspace, localspace,…).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sign(vector2D(x,y))&lt;/code&gt; : new we will be getting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vector2D()&lt;/code&gt; in its unit form : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1 / length(v1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-are-normalized-vectors-useful&quot;&gt;Why are Normalized vectors useful?&lt;/h2&gt;

&lt;p&gt;When we want to do something along a direction, we don’t want to add further changes than intended. A unit / normalized vector provides just a direction and then we can modify such direction to to fit your magnitude needs.&lt;/p&gt;

&lt;h2 id=&quot;length-of-a-vector-in-2d-and-3d&quot;&gt;Length of a vector in 2D (and 3D)&lt;/h2&gt;

&lt;p&gt;To normalize a vector we need the length of it. In 1D, the main component is already the scalar part of a vector, but in higher dimentions we need other things. We just use basic trigonometry, the Pythagorean Theorem:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;vector3D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u_length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In higher dimentions, I really don’t know at this point, we’ll figure it out.&lt;/p&gt;

&lt;h2 id=&quot;distance-between-2-vectors--lengthv2---v1&quot;&gt;Distance between 2 Vectors = length(v2 - v1)&lt;/h2&gt;

&lt;p&gt;As stated in the beginning, the distance is the length of a vector that joins two points. A vector defines a point, thus a substraction between point2 and point1 will define a vector from point1 to point2. Then we have to get the length of the newly created vector:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distance_v_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;distance_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Same for 3D, but adding z component&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-point-along-a-direction&quot;&gt;Example: Point along a direction&lt;/h2&gt;

&lt;p&gt;To get a point along a direction represented by an origin point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; and an end point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Calculate vector &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt; that joins those points&lt;/li&gt;
  &lt;li&gt;Get the normalized version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_norm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Multiply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_norm&lt;/code&gt; to know where to get a point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_point&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_point&lt;/code&gt;, to get final point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_final&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Congrats you have got a point between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0o&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length_u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_norm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length_u&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalar_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_norm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalar_value&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;dot-product-dotv1-v2--v1-x-v2&quot;&gt;Dot Product &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dot(v1, v2) = v1 x v2&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;/assets/posts_images/02-MathGameDev01/DotProduct.png&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most starightforward way of understanding a dot product for me is that we are projecting a vector over another. Imagine a light that shines perpendicular to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;/code&gt; will cast a shadow over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt; that will result in another vector that is a smaller or bigger version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The result of the operation is a scalar value that indicates the percentage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt; that is obfuscated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;/code&gt;. This value can also be negative if the vectors are going in different directions!&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vector2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dot_u_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;use-case-1-squared-unsigned-distance-of-a-vector&quot;&gt;Use Case 1: Squared Unsigned Distance of a Vector&lt;/h2&gt;

&lt;p&gt;If we run that operation by making sure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u = v&lt;/code&gt;, we get the same operation as the length without computing the squared root of it. In some cases, computing the square root is more costly that squaring up the value we want to compare!&lt;/p&gt;

&lt;h2 id=&quot;use-case-2-direction-difference-between-2-vectors&quot;&gt;Use Case 2: Direction difference between 2 vectors&lt;/h2&gt;

&lt;p&gt;What makes this operation extremely useful is that when we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;normalize&lt;/code&gt; the vectors and perform the operation, we are returned the cosine of the angle bewteen the vectors!&lt;/p&gt;

&lt;p&gt;This ends up helping us by using directly the value as a really fast indication of direction between those vectors.&lt;/p&gt;

&lt;p&gt;Further down the line we can obtain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angle&lt;/code&gt; between these two vectors in order to get detail information on direction, but taht will come in another post!&lt;/p&gt;

&lt;h1 id=&quot;afterwords&quot;&gt;Afterwords&lt;/h1&gt;

&lt;p&gt;This series of posts are mainly for my own use. Everyone understands concepts in different ways, after a lot of time battling ways of working (which unfortunately during my studies have been based mostly on crunching) I have found out that having accessible notes on things is the best way. I am awful at remembering thigns correctly and have to check things constantly.&lt;/p&gt;

&lt;p&gt;For any other person that does think this theme is useful to them, check &lt;a href=&quot;https://www.youtube.com/channel/UC7M-Wz4zK8oikt6ATcoTwBA&quot;&gt;Freya Holmer’s Youtube Channel&lt;/a&gt;, as most of her content is already uploaded there!&lt;/p&gt;</content><author><name>Marc Torres Jimenez</name></author><category term="Math" /><category term="Games" /><category term="math" /><category term="game development" /><category term="trigonometry" /><category term="introduction" /><summary type="html">Freya Holmer published some time ago some classes on the basic maths required for gamedev. Having myself not been a great math student in university I think it is important for myself to have notes in an accessible form. Hope it is useful to someone.</summary></entry><entry><title type="html">Getting this blog setup</title><link href="/web/2021/07/21/Setup.html" rel="alternate" type="text/html" title="Getting this blog setup" /><published>2021-07-21T00:00:00+02:00</published><updated>2021-07-22T14:00:00+02:00</updated><id>/web/2021/07/21/Setup</id><content type="html" xml:base="/web/2021/07/21/Setup.html">&lt;p&gt;This post will be an overview on getting a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; based blog working.&lt;/p&gt;

&lt;p&gt;For this you will need any text editor and just knowing that the terminal exist, where you write words and things go boom or vroom.&lt;/p&gt;

&lt;p&gt;My choice is &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; which has built-in terminal support, is cross-platform and quite lightweight.&lt;/p&gt;

&lt;h1 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h1&gt;

&lt;p&gt;The framework used for setting up this blog is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;, which is a static page generator. In other works you feed it a certain type of file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html templates&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markdown&lt;/code&gt;,…), a set of rules (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML files&lt;/code&gt;) and the output is an easy to maintain static blog.&lt;/p&gt;

&lt;p&gt;The benefit of doing it this way is that the pages are as fast as long as you don’t bloat them with too much &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Javascript&lt;/code&gt; bullcrap. There are tons of templates available, of which I am using a slightly modified version of &lt;a href=&quot;https://github.com/mmistakes/so-simple-theme&quot;&gt;So Simple&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;The guide for installing Jekyll&lt;/a&gt; is really straight to the point, so going there is recommended (specially for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSL&lt;/code&gt;). But in short:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install the Requirements
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby 2.5.0 &amp;lt; &lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://win-builds.org/doku.php&quot;&gt;GCC + Make&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Done!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally I installed directly GCC and Make through &lt;a href=&quot;http://win-builds.org/doku.php&quot;&gt;Win-Builds&lt;/a&gt; which makes the process &lt;em&gt;SO Simple&lt;/em&gt; ;), but you have to take care of unchecking what you don’t want to install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts_images/01-Getting-this-blog-setup/WinBuild.png&quot; alt=&quot;Setup Screen of Win-Builds&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;starting-the-blog&quot;&gt;Starting the blog&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Open a terminal instance (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command Prompt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bash&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powershell&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Konsole&lt;/code&gt;,…)&lt;/li&gt;
  &lt;li&gt;Navigate to where the blog folder will be created&lt;/li&gt;
  &lt;li&gt;Create the blog&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;C:/&amp;lt;path&amp;gt;/&amp;lt;to&amp;gt;/&amp;lt;folder&amp;gt;
&lt;span class=&quot;c&quot;&gt;# For base template&lt;/span&gt;
jekyll new &amp;lt;blogname&amp;gt; &lt;span class=&quot;c&quot;&gt;#--blank #Option to not install any default theme&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;blogname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The newly created blog should follow a similar structure:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;/assets/posts_images/01-Getting-this-blog-setup/FolderStructure.png&quot; width=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_data&lt;/code&gt; : Were secondary configuration files are stored&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_drafts&lt;/code&gt; : WIP posts, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; primarily, but not made public&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; : Specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML Templates&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; : Page type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML Templates&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; : Finished posts that are made public&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_css&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_scss&lt;/code&gt; : Where the stylesheets are saved&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; : An optional folder to organize assets under&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; : Main Config file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; : File detailing which plugins to use (Gems - RubyGems)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Then you can preview it by executing and going to &lt;strong&gt;&lt;a href=&quot;localhost:4000&quot;&gt;localhost:4000&lt;/a&gt;&lt;/strong&gt; on you browser&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;# If you don't have a theme, ignore &amp;lt;bundle exec&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that you are already done, you can start writing posts and whatever you want!&lt;/p&gt;

&lt;h1 id=&quot;your-first-post&quot;&gt;Your First Post!&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you are setup, a base file should look like the following:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Awesome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Post&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Damn&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;easy&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;page / default / post /...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme-options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;gh&quot;&gt;# Content Starts Here!&lt;/span&gt;

lorem ipsum whatever i don't remeber more than the start...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each file will have a header in which the parsing information will be setup. Depending on the theme there will be different layout options and exclusive options to be filled. For example in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SO Simple&lt;/code&gt; theme, there are categories and tags that can be written to then have an easier way to seach and filter posts.&lt;/p&gt;

&lt;p&gt;Then the content of the posts is written using either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; or &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;&lt;/a&gt; syntax, which is extremely simple and quick to get used to. The theme will take care of your content being displayed as intended, you just have to focus on making the contest as rich and straight to the point as it should.&lt;/p&gt;

&lt;p&gt;Congrats, you have your first post already up and running!&lt;/p&gt;

&lt;h1 id=&quot;themes-and-customization&quot;&gt;Themes and Customization&lt;/h1&gt;

&lt;p&gt;Making the blog your own is just a process of finding the template you want and changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML Templates&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Browse for themes:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/topics/jekyll-theme&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jamstackthemes.dev/ssg/jekyll/&quot;&gt;JamStack Themes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;jekyllthemes.io&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyll-themes.com/&quot;&gt;jekyll-themes.com&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Download it and follow the theme instructions. Most themes are basically drag and drop to start, some are a bit more finnicky.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;! THE CONFIG.YML FILE ORDER OF COMMANDS IS VERY IMPORTANT&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;gemfile&quot;&gt;Gemfile&lt;/h2&gt;

&lt;p&gt;The gemfile details the dependencies for other plugins or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gems&lt;/code&gt;. You will find that some rely on dependencies or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gems&lt;/code&gt; that are unspecified, in most cases you will have to add them to the project and it will just work:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;gem&amp;gt;
bundle add &amp;lt;gem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then to make sure that the ones used are up to date:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update &lt;span class=&quot;c&quot;&gt;#&amp;lt;THEME&amp;gt; &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#If you have dropped the theme in your folder it is not needed to specify the theme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;layouts&quot;&gt;Layouts&lt;/h2&gt;

&lt;p&gt;On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/layouts&lt;/code&gt; directory there will be the base pages for the layout. The gist of it is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; files will be used as templates for the content provided.&lt;/p&gt;

&lt;p&gt;If you are not familiar with the notation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; parses &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Liquid&lt;/code&gt;&lt;/a&gt; based syntax to generate the final website structure. Each layout and include file will probably be riddled with  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% something something %}&lt;/code&gt; , that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Liquid&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;Unless you want to create your own theme or modify heavily some parts of another one, you don’t really have to get into the nitty gritty of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Liquid&lt;/code&gt;. The syntax is quite clear, with its quirks and a very annoying way to specify code to be parsed.&lt;/p&gt;

&lt;h2 id=&quot;includes&quot;&gt;Includes&lt;/h2&gt;

&lt;p&gt;In most layouts, you will find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Liquid&lt;/code&gt; lines that do the following  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% include &amp;lt;file.html&amp;gt; %}&lt;/code&gt; . This will insert the file into the one being parsed. These include files are for specific uses that require more work to get going, are less user friendly or bring functionality to multiple layouts usually.&lt;/p&gt;

&lt;p&gt;In most circumstances, you might want to poke around there but there is not much to gain besides knowledege, if you are using a premade theme.&lt;/p&gt;

&lt;h2 id=&quot;stylesheets&quot;&gt;Stylesheets&lt;/h2&gt;

&lt;p&gt;Coming from someone who knows jack-shit about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSS&lt;/code&gt;, poke around and have fun searching around the web to get specific changes. Most themes will provide a main file with some variables that can be overriden with your preferred color schemes and fonts. To make further changes you are on your own. Just one thing:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%variable : value1 value2 value3 ...&lt;/code&gt; : Is how variables are created in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCSS&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SASS&lt;/code&gt;, can include other variables as values.&lt;/p&gt;

&lt;h1 id=&quot;hosting&quot;&gt;Hosting&lt;/h1&gt;

&lt;p&gt;I really have no clue, I have never hosted any blog or personal webpage anywhere. What I am using at the time of posting this first entry is &lt;a href=&quot;https://pages.github.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github Pages&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository-&amp;gt;Setting-&amp;gt;Pages&lt;/code&gt; select where, base or docs, to start searching for the entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; page and it will be displayed under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.github.io/ProjectName&lt;/code&gt;. The domain name can be customized but I don’t feel it is necessary to do for most projects.&lt;/p&gt;

&lt;p&gt;For a dedicated page, you create a repository with the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; that will become your landing page.&lt;/p&gt;

&lt;p&gt;The service is currently free and does just exactly what I need, probably even more but I currently don’t need to delve deeper into it.&lt;/p&gt;

&lt;h1 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h1&gt;

&lt;p&gt;If you don’t have a personal page, create one. It is not a thing that will increase much your visibility, but it will serve a more polished and curated view to your own work towards other people.&lt;/p&gt;</content><author><name>Marc Torres Jimenez</name></author><category term="Web" /><category term="markdown" /><category term="html" /><category term="jekyll" /><summary type="html">This post will be an overview on getting a simple Jekyll based blog working.</summary></entry></feed>